services:
  x-kafka-common: &kafka-common
    image: bitnami/kafka:latest
    restart: always
    environment: &kafka-common-env
      KAFKA_ENABLE_KRAFT: yes
      ALLOW_PLAINTEXT_LISTENER: yes
      KAFKA_KRAFT_CLUSTER_ID: KN9-sDbESU6GrNQZBkNlMA
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 0@kafka-0:9093,1@kafka-1:9093,2@kafka-2:9093
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: false
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --list" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - kafka_net

  kafka-0:
    <<: *kafka-common
    restart: always
    ports:
      - "9094:9094"
    environment:
      <<: *kafka-common-env
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-0:9092,EXTERNAL://127.0.0.1:9094
    volumes:
      - kafka_0_data:/bitnami/kafka

  kafka-1:
    <<: *kafka-common
    restart: always
    ports:
      - "127.0.0.1:9095:9095"
    environment:
      <<: *kafka-common-env
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9095
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:9092,EXTERNAL://127.0.0.1:9095
    volumes:
      - kafka_1_data:/bitnami/kafka

  kafka-2:
    <<: *kafka-common
    restart: always
    ports:
      - "127.0.0.1:9096:9096"
    environment:
      <<: *kafka-common-env
      KAFKA_CFG_NODE_ID: 2
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9096
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:9092,EXTERNAL://127.0.0.1:9096
    volumes:
      - kafka_2_data:/bitnami/kafka

  schema-registry:
    image: bitnami/schema-registry:latest
    ports:
      - "8081:8081"
    depends_on:
      kafka-0:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
    environment:
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKA_BROKERS: PLAINTEXT://kafka-0:9092,PLAINTEXT://kafka-1:9092,PLAINTEXT://kafka-2:9092
    networks:
      - kafka_net

  ui:
    image: provectuslabs/kafka-ui:latest
    ports:
      - "127.0.0.1:8080:8080"
    environment:
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka-0:9092,kafka-1:9092,kafka-2:9092
      KAFKA_CLUSTERS_0_NAME: kraft
      KAFKA_CLUSTERS_0_KSQLDBSERVER: http://ksqldb-server:8088
    networks:
      - kafka_net

  kafka-topic-creator:
    image: bitnami/kafka:latest
    depends_on:
      kafka-0:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
    entrypoint: /bin/bash
    command: -c "
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka-0:9092 --replication-factor 2 --partitions 3 --topic messages;
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka-0:9092 --replication-factor 2 --partitions 3 --topic messages-table --config cleanup.policy=compact;
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka-0:9092 --replication-factor 2 --partitions 3 --topic filtered-messages;
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka-0:9092 --replication-factor 2 --partitions 3 --topic filtered-messages-table --config cleanup.policy=compact;
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka-0:9092 --replication-factor 2 --partitions 3 --topic blocked-users;
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka-0:9092 --replication-factor 2 --partitions 3 --topic blocked-users-table --config cleanup.policy=compact;
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka-0:9092 --replication-factor 2 --partitions 3 --topic deny-words;
      kafka-topics.sh --create --if-not-exists --bootstrap-server kafka-0:9092 --replication-factor 2 --partitions 3 --topic deny-words-table --config cleanup.policy=compact;
      exit 0 "
    networks:
      - kafka_net

  ksqldb-server:
    image: confluentinc/ksqldb-server:latest
    ports:
      - "8088:8088"
    depends_on:
      kafka-0:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
    environment:
      KSQL_BOOTSTRAP_SERVERS: kafka-0:9092,kafka-1:9092,kafka-2:9092
      KSQL_KSQL_SCHEMA_REGISTRY_URL: http://schema-registry:8081
    networks:
      - kafka_net

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:latest
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh -c 'exec ksql http://ksqldb-server:8088'
    stdin_open: true
    tty: true
    networks:
      - kafka_net

  goka-flow:
    image: golang:1.24-alpine
    working_dir: /app
    volumes:
      - .:/app
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka-0:9092,kafka-1:9092,kafka-2:9092
      SCHEMA_REGISTRY_URL: http://schema-registry:8081
    command: sh -c "go build -o main . && ./main"
    depends_on:
      kafka-0:
        condition: service_healthy
      kafka-1:
        condition: service_healthy
      kafka-2:
        condition: service_healthy
      schema-registry:
        condition: service_started
      kafka-topic-creator:
        condition: service_completed_successfully
    restart: unless-stopped
    networks:
      - kafka_net

volumes:
  kafka_0_data:
  kafka_1_data:
  kafka_2_data:

networks:
  kafka_net:
    driver: bridge